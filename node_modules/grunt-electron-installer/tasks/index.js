(function() {
  var ChildProcess, asar, convertVersion, fs, path, temp, _;

  ChildProcess = require('child_process');

  fs = require('fs');

  asar = require('asar');

  path = require('path');

  temp = require('temp');

  _ = require('underscore');

  temp.track();

  module.exports = function(grunt) {
    var exec, locateExecutableInPath;
    exec = function(options, callback) {
      return ChildProcess.execFile(options.cmd, options.args, function(error, stdout, stderr) {
        if (stderr) {
          grunt.log.error(stderr);
        }
        return callback(error);
      });
    };
    locateExecutableInPath = function(name) {
      var haystack;
      haystack = _.map(process.env.PATH.split(/[:;]/), function(x) {
        return path.join(x, name);
      });
      return _.find(haystack, function(needle) {
        return fs.existsSync(needle);
      });
    };
    return grunt.registerMultiTask('create-windows-installer', 'Create the Windows installer', function() {
      var appDirectory, appMetadata, appResourcesDirectory, args, asarFile, certificateFile, certificatePassword, cmd, config, done, loadingGif, metadata, monoExe, nugetOutput, nuspecContent, outputDirectory, remoteReleases, signWithParams, syncReleases, targetNuspecPath, template, useMono, wineExe, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      this.requiresConfig("" + this.name + "." + this.target + ".appDirectory");
      useMono = false;
      _ref = _.map(['mono', 'wine'], locateExecutableInPath), monoExe = _ref[0], wineExe = _ref[1];
      if (process.platform !== 'win32') {
        useMono = true;
        if (!(wineExe && monoExe)) {
          throw new Error("You must install both Mono and Wine on non-Windows");
        }
        grunt.verbose.ok("Using Mono: '" + monoExe + "'");
        grunt.verbose.ok("Using Wine: '" + wineExe + "'");
      }
      done = this.async();
      config = grunt.config("" + this.name + "." + this.target);
      appDirectory = path.resolve(config.appDirectory);
      grunt.file.copy(path.resolve(__dirname, '..', 'vendor', 'Update.exe'), path.join(appDirectory, 'Update.exe'));
      outputDirectory = (_ref1 = config.outputDirectory) != null ? _ref1 : 'installer';
      outputDirectory = path.resolve(outputDirectory);
      loadingGif = (_ref2 = config.loadingGif) != null ? _ref2 : path.resolve(__dirname, '..', 'resources', 'install-spinner.gif');
      loadingGif = path.resolve(loadingGif);
      certificateFile = config.certificateFile, certificatePassword = config.certificatePassword, remoteReleases = config.remoteReleases, signWithParams = config.signWithParams;
      asarFile = path.join(appDirectory, 'resources', 'app.asar');
      if (fs.existsSync(asarFile)) {
        appMetadata = JSON.parse(asar.extractFile(asarFile, 'package.json'));
      } else {
        appResourcesDirectory = path.join(appDirectory, 'resources', 'app');
        appMetadata = grunt.file.readJSON(path.join(appResourcesDirectory, 'package.json'));
      }
      metadata = _.extend({}, appMetadata, config);
      if (metadata.authors == null) {
        metadata.authors = (_ref3 = (_ref4 = (_ref5 = metadata.author) != null ? _ref5.name : void 0) != null ? _ref4 : metadata.author) != null ? _ref3 : '';
      }
      if (metadata.description == null) {
        metadata.description = '';
      }
      if (metadata.exe == null) {
        metadata.exe = "" + metadata.name + ".exe";
      }
      if (metadata.iconUrl == null) {
        metadata.iconUrl = 'https://raw.githubusercontent.com/atom/electron/master/atom/browser/resources/win/atom.ico';
      }
      if (metadata.owners == null) {
        metadata.owners = metadata.authors;
      }
      if (metadata.title == null) {
        metadata.title = (_ref6 = metadata.productName) != null ? _ref6 : metadata.name;
      }
      metadata.version = convertVersion(metadata.version);
      if (metadata.copyright == null) {
        metadata.copyright = "Copyright Â© " + (new Date().getFullYear()) + " " + ((_ref7 = metadata.authors) != null ? _ref7 : metadata.owners);
      }
      template = _.template(grunt.file.read(path.resolve(__dirname, '..', 'template.nuspec')));
      nuspecContent = template(metadata);
      nugetOutput = temp.mkdirSync('si');
      targetNuspecPath = path.join(nugetOutput, "" + metadata.name + ".nuspec");
      grunt.file.write(targetNuspecPath, nuspecContent);
      cmd = path.resolve(__dirname, '..', 'vendor', 'nuget.exe');
      args = ['pack', targetNuspecPath, '-BasePath', appDirectory, '-OutputDirectory', nugetOutput, '-NoDefaultExcludes'];
      if (useMono) {
        args.unshift(cmd);
        cmd = monoExe;
      }
      syncReleases = function(cb) {
        if (remoteReleases != null) {
          cmd = path.resolve(__dirname, '..', 'vendor', 'SyncReleases.exe');
          args = ['-u', remoteReleases, '-r', outputDirectory];
          if (useMono) {
            args.unshift(cmd);
            cmd = monoExe;
          }
          return exec({
            cmd: cmd,
            args: args
          }, cb);
        } else {
          return process.nextTick(function() {
            return cb();
          });
        }
      };
      return exec({
        cmd: cmd,
        args: args
      }, function(error) {
        var nupkgPath;
        if (error != null) {
          return done(error);
        }
        nupkgPath = path.join(nugetOutput, "" + metadata.name + "." + metadata.version + ".nupkg");
        return syncReleases(function(error) {
          var setupIconPath;
          if (error != null) {
            return done(error);
          }
          cmd = path.resolve(__dirname, '..', 'vendor', 'Update.com');
          args = ['--releasify', nupkgPath, '--releaseDir', outputDirectory, '--loadingGif', loadingGif];
          if (useMono) {
            args.unshift(path.resolve(__dirname, '..', 'vendor', 'Update-Mono.exe'));
            cmd = monoExe;
          }
          if (signWithParams != null) {
            args.push('--signWithParams');
            args.push(signWithParams);
          } else if ((certificateFile != null) && (certificatePassword != null)) {
            args.push('--signWithParams');
            args.push("/a /f \"" + (path.resolve(certificateFile)) + "\" /p \"" + certificatePassword + "\"");
          }
          if (config.setupIcon) {
            setupIconPath = path.resolve(config.setupIcon);
            args.push('--setupIcon');
            args.push(setupIconPath);
          }
          if (config.noMsi) {
            args.push('--no-msi');
          }
          return exec({
            cmd: cmd,
            args: args
          }, function(error) {
            var setupMsiPath, setupPath;
            if (error != null) {
              return done(error);
            }
            if (metadata.productName) {
              setupPath = path.join(outputDirectory, "" + metadata.productName + "Setup.exe");
              setupMsiPath = path.join(outputDirectory, "" + metadata.productName + "Setup.msi");
              fs.renameSync(path.join(outputDirectory, 'Setup.exe'), setupPath);
              if (fs.existsSync(path.join(outputDirectory, 'Setup.msi'))) {
                fs.renameSync(path.join(outputDirectory, 'Setup.msi'), setupMsiPath);
              }
            }
            return done();
          });
        });
      });
    });
  };

  convertVersion = function(version) {
    var mainVersion, parts;
    parts = version.split('-');
    mainVersion = parts.shift();
    if (parts.length > 0) {
      return [mainVersion, parts.join('-').replace(/\./g, '')].join('-');
    } else {
      return mainVersion;
    }
  };

  module.exports.convertVersion = convertVersion;

}).call(this);
